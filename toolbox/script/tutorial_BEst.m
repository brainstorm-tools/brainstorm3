function tutorial_introduction(tutorial_dir, reports_dir)
% TUTORIAL_INTRODUCTION: Script that runs all the Brainstorm introduction tutorials.
%
% INPUTS: 
%    - tutorial_dir : Directory where the sample_introduction.zip file has been unzipped
%    - reports_dir  : Directory where to save the execution report (instead of displaying it)

% @=============================================================================
% This function is part of the Brainstorm software:
% https://neuroimage.usc.edu/brainstorm
% 
% Copyright (c) University of Southern California & McGill University
% This software is distributed under the terms of the GNU General Public License
% as published by the Free Software Foundation. Further details on the GPLv3
% license can be found at http://www.gnu.org/copyleft/gpl.html.
% 
% FOR RESEARCH PURPOSES ONLY. THE SOFTWARE IS PROVIDED "AS IS," AND THE
% UNIVERSITY OF SOUTHERN CALIFORNIA AND ITS COLLABORATORS DO NOT MAKE ANY
% WARRANTY, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
% MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, NOR DO THEY ASSUME ANY
% LIABILITY OR RESPONSIBILITY FOR THE USE OF THIS SOFTWARE.
%
% For more information type "brainstorm license" at command prompt.
% =============================================================================@
%
% Author: Francois Tadel, 2016-2017


% ===== FILES TO IMPORT =====
% Output folder for reports
if (nargin < 2) || isempty(reports_dir) || ~isdir(reports_dir)
    reports_dir = [];
end
% You have to specify the folder in which the tutorial dataset is unzipped
if (nargin == 0) || isempty(tutorial_dir) || ~file_exist(tutorial_dir)
    error('The first argument must be the full path to the dataset folder.');
end
% Subject name
SubjectName = 'Subject01';
% Build the path of the files to import
AnatDir    = fullfile(tutorial_dir, 'sample_introduction', 'anatomy');
Run1File   = fullfile(tutorial_dir, 'sample_introduction', 'data', 'S01_AEF_20131218_01_600Hz.ds');
NoiseFile  = fullfile(tutorial_dir, 'sample_introduction', 'data', 'S01_Noise_20131218_02_600Hz.ds');
% Check if the folder contains the required files
if ~file_exist(Run1File)
    error(['The folder ' tutorial_dir ' does not contain the folder from the file sample_introduction.zip.']);
end
% Re-inialize random number generator
if (bst_get('MatlabVersion') >= 712)
    rng('default');
end


%% ===== TUTORIAL #1: CREATE PROTOCOL ================================================
%  ===================================================================================
disp([10 'DEMO> Tutorial #1: Create protocol' 10]);
% The protocol name has to be a valid folder name (no spaces, no weird characters...)
ProtocolName = 'TutorialIntroduction';
% Start brainstorm without the GUI
if ~brainstorm('status')
    brainstorm nogui
end
% Delete existing protocol
gui_brainstorm('DeleteProtocol', ProtocolName);
% Create new protocol
gui_brainstorm('CreateProtocol', ProtocolName, 0, 0);
% Start a new report
bst_report('Start');
% Reset colormaps
bst_colormaps('RestoreDefaults', 'meg');
% Set the current display mode to 'butterfly'
bst_set('TSDisplayMode', 'butterfly');


%% ===== TUTORIAL #2: IMPORT ANATOMY =================================================
%  ===================================================================================
disp([10 'DEMO> Tutorial #2: Import anatomy' 10]);
% Process: Import FreeSurfer folder
bst_process('CallProcess', 'process_import_anatomy', [], [], ...
    'subjectname', SubjectName, ...
    'mrifile',     {AnatDir, 'FreeSurfer'}, ...
    'nvertices',   15000, ...
    'nas', [127, 213, 139], ...
    'lpa', [ 52, 113,  96], ...
    'rpa', [202, 113,  91]);
% This automatically calls the SPM registration procedure because the AC/PC/IH points are not defined



%% ===== TUTORIAL #3: EXPLORE ANATOMY ================================================
%  ===================================================================================
disp([10 'DEMO> Tutorial #3: Explore anatomy' 10]);
% Get subject definition
sSubject = bst_get('Subject', SubjectName);
% Get MRI file and surface files
MriFile    = sSubject.Anatomy(sSubject.iAnatomy).FileName;
CortexFile = sSubject.Surface(sSubject.iCortex).FileName;
HeadFile   = sSubject.Surface(sSubject.iScalp).FileName;
% Display MRI
hFigMri1 = view_mri(MriFile);
hFigMri3 = view_mri_3d(MriFile, [], [], 'NewFigure');
hFigMri2 = view_mri_slices(MriFile, 'x', 20); 
pause(0.5);
% Close figures
close([hFigMri1 hFigMri2 hFigMri3]);
% Display scalp and cortex
hFigSurf = view_surface(HeadFile);
hFigSurf = view_surface(CortexFile, [], [], hFigSurf);
hFigMriSurf = view_mri(MriFile, CortexFile);
% Figure configuration
iTess = 2;
panel_surface('SetShowSulci',     hFigSurf, iTess, 1);
panel_surface('SetSurfaceColor',  hFigSurf, iTess, [1 0 0]);
panel_surface('SetSurfaceSmooth', hFigSurf, iTess, 0.5, 0);
panel_surface('SetSurfaceTransparency', hFigSurf, iTess, 0.8);
figure_3d('SetStandardView', hFigSurf, 'left');
pause(0.5);
% Close figures
close([hFigSurf hFigMriSurf]);



%% ===== TUTORIAL #4: CHANNEL FILE ===================================================
%  ===================================================================================
disp([10 'DEMO> Tutorial #4: Channel file' 10]);
% Process: Create link to raw files
sFilesRun1 = bst_process('CallProcess', 'process_import_data_raw', [], [], ...
    'subjectname',  SubjectName, ...
    'datafile',     {Run1File, 'CTF'}, ...
    'channelalign', 1);

sFilesNoise = bst_process('CallProcess', 'process_import_data_raw', [], [], ...
    'subjectname',  SubjectName, ...
    'datafile',     {NoiseFile, 'CTF'}, ...
    'channelalign', 0);
sFilesRaw = [sFilesRun1, sFilesNoise];
% Process: Snapshot: Sensors/MRI registration
bst_process('CallProcess', 'process_snapshot', sFilesRun1, [], ...
    'target',   1, ...  % Sensors/MRI registration
    'modality', 1, ...  % MEG (All)
    'orient',   1, ...  % left
    'Comment',  'MEG/MRI Registration');

% View sensors
hFig = view_surface(HeadFile);
hFig = view_channels(sFilesRun1.ChannelFile, 'MEG', 1, 1, hFig);
% Hide sensors
pause(0.5);
hFig = view_channels(sFilesRun1.ChannelFile, 'MEG', 0, 0, hFig);
% View coils
hFig = view_channels(sFilesRun1.ChannelFile, 'CTF', 1, 1, hFig);
% View helmet
pause(0.5);
hFig = view_helmet(sFilesRun1.ChannelFile, hFig);
pause(0.5);
close(hFig);
% Edit good/bad channel for current file
gui_edit_channel(sFilesRun1.ChannelFile);
pause(0.5);
% Unload everything
bst_memory('UnloadAll', 'Forced');



%% ===== TUTORIAL #5: REVIEW RAW =====================================================
%  ===================================================================================
disp([10 'DEMO> Tutorial #5: Review raw' 10]);
% Process: Convert to continuous (CTF): Continuous
bst_process('CallProcess', 'process_ctf_convert', sFilesRaw, [], ...
    'rectype', 2);  % Continuous

% View recordings
hFigMeg = view_timeseries(sFilesRun1.FileName, 'MEG');
hFigEeg = view_timeseries(sFilesRun1.FileName, 'Misc');
hFigSel = view_timeseries(sFilesRun1.FileName, 'MEG', {'MLT11','MLT12','MLT13'});
% Figure configuration
pause(0.5);
panel_record('SetTimeLength', 3);
panel_record('SetStartTime', 100);
panel_record('SetDisplayMode', hFigMeg, 'column');
panel_montage('SetCurrentMontage', hFigMeg, 'CTF LT');
% Set filters: panel_filter('SetFilters', LowPassEnabled, LowPassValue, HighPassEnabled, HighPassValue, SinRemovalEnabled, SinRemovalValue, MirrorEnabled, FullSourcesEnabled)
panel_filter('SetFilters', 1, 100, 1, 1, 0, [], 0, 0);
pause(0.5);
panel_record('SetDisplayMode', hFigMeg, 'butterfly');
panel_montage('SetCurrentMontage', hFigMeg, '');
% Close figures
close([hFigMeg hFigEeg hFigSel]);



%% ===== TUTORIAL #8: STIM DELAYS ====================================================
%  ===================================================================================
disp([10 'DEMO> Tutorial #8: Stim delays' 10]);
% Process: Detect: standard_fix
bst_process('CallProcess', 'process_evt_detect_analog', sFilesRun1, [], ...
    'eventname',   'standard_fix', ...
    'channelname', 'UADC001', ...
    'timewindow',  [], ...
    'threshold',   1.2, ...
    'blanking',    0.2, ...
    'highpass',    0, ...
    'lowpass',     0, ...
    'refevent',    'standard', ...
    'isfalling',   0, ...
    'ispullup',    0, ...
    'isclassify',  0);
% Process: Detect: deviant_fix
bst_process('CallProcess', 'process_evt_detect_analog', sFilesRun1, [], ...
    'eventname',   'deviant_fix', ...
    'channelname', 'UADC001', ...
    'timewindow',  [], ...
    'threshold',   1.2, ...
    'blanking',    0.2, ...
    'highpass',    0, ...
    'lowpass',     0, ...
    'refevent',    'deviant', ...
    'isfalling',   0, ...
    'ispullup',    0, ...
    'isclassify',  0);
% Process: Read from channel
bst_process('CallProcess', 'process_evt_read', sFilesRun1, [], ...
    'stimchan',  'UDIO001', ...
    'trackmode', 1, ...  % Value: detect the changes of channel value
    'zero',      0);

% Process: Delete events
bst_process('CallProcess', 'process_evt_delete', sFilesRun1, [], ...
    'eventname', 'standard, deviant, button');
% Process: Rename event (standard_fix>standard)
bst_process('CallProcess', 'process_evt_rename', sFilesRun1, [], ...
    'src',  'standard_fix', ...
    'dest', 'standard');
% Process: Rename event (deviant_fix>deviant)
bst_process('CallProcess', 'process_evt_rename', sFilesRun1, [], ...
    'src',  'deviant_fix', ...
    'dest', 'deviant');
% Process: Rename event (64>button)
bst_process('CallProcess', 'process_evt_rename', sFilesRun1, [], ...
    'src',  '64', ...
    'dest', 'button');



%% ===== TUTORIAL #10: FREQUENCY FILTERS =============================================
%  ===================================================================================
disp([10 'DEMO> Tutorial #10: Frequency filters' 10]);
% Process: Sinusoid removal: 60Hz 120Hz 180Hz 300Hz
sFilesNotch = bst_process('CallProcess', 'process_notch', sFilesRaw, [], ...
    'freqlist',    [60, 120, 180], ...
    'sensortypes', 'MEG', ...
    'read_all',    0);
% Process: Power spectrum density (Welch)
sFilesPsd = bst_process('CallProcess', 'process_psd', [sFilesRaw, sFilesNotch], [], ...
    'timewindow',  [], ...
    'win_length',  4, ...
    'win_overlap', 50, ...
    'clusters',    {}, ...
    'sensortypes', 'MEG', ...
    'edit', struct(...
         'Comment',    'Power', ...
         'TimeBands',  [], ...
         'Freqs',      [], ...
         'ClusterFuncTime', 'none', ...
         'Measure',    'power', ...
         'Output',     'all', ...
         'SaveKernel', 0));
% Process: Snapshot: Frequency spectrum
bst_process('CallProcess', 'process_snapshot', sFilesPsd, [], ...
    'target',   10, ...  % Frequency spectrum
    'modality', 1, ...   % MEG (All)
    'Comment',  'Power spectrum density');
% Process: Delete folders
bst_process('CallProcess', 'process_delete', sFilesRaw, [], ...
    'target', 2);  % Delete folders

% Separate the three outputs
sFilesRun1  = {sFilesNotch(1).FileName};



%% ===== TUTORIAL #11: BAD CHANNELS ==================================================
%  ===================================================================================
% % Process: Set bad channels
% sFiles = bst_process('CallProcess', 'process_channel_setbad', sFilesRun2, [], ...
%     'sensortypes', 'MRT51, MLO52, MLO42, MLO43');



%% ===== TUTORIAL #12: ARTIFACTS DETECTION ===========================================
%  ===================================================================================
disp([10 'DEMO> Tutorial #12: Artifacts detection' 10]);
% Process: Detect heartbeats
bst_process('CallProcess', 'process_evt_detect_ecg', sFilesRun1, [], ...
    'channelname', 'ECG', ...
    'timewindow',  [], ...
    'eventname',   'cardiac');
% Process: Detect eye blinks
bst_process('CallProcess', 'process_evt_detect_eog',  sFilesRun1, [], ...
    'channelname', 'VEOG', ...
    'timewindow',  [], ...
    'eventname',   'blink');
% Process: Remove simultaneous
bst_process('CallProcess', 'process_evt_remove_simult', sFilesRun1, [], ...
    'remove', 'cardiac', ...
    'target', 'blink', ...
    'dt',     0.25, ...
    'rename', 0);



%% ===== TUTORIAL #13: SSP ===========================================================
%  ===================================================================================
disp([10 'DEMO> Tutorial #13: SSP' 10]);
% Process: SSP ECG: cardiac
bst_process('CallProcess', 'process_ssp_ecg', sFilesRun1, [], ...
    'eventname',   'cardiac', ...
    'sensortypes', 'MEG', ...
    'usessp',      0, ...
    'select',      1);
% Process: SSP EOG: blink
bst_process('CallProcess', 'process_ssp_eog', sFilesRun1, [], ...
    'eventname',   'blink', ...
    'sensortypes', 'MEG', ...
    'usessp',      0, ...
    'select',      [1 2]);



%% ===== TUTORIAL #14: BAD SEGMENTS ==================================================
%  ===================================================================================
disp([10 'DEMO> Tutorial #14: Bad segments' 10]);
% Process: Detect other artifacts
bst_process('CallProcess', 'process_evt_detect_badsegment', sFilesRun1, [], ...
    'timewindow',  [], ...
    'sensortypes', 'MEG', ...
    'threshold',   3, ...  % 3
    'isLowFreq',   1, ...
    'isHighFreq',  1);


% Process: Rename event (1-7Hz > bad_1-7Hz)
bst_process('CallProcess', 'process_evt_rename', sFilesRun1, [], ...
    'src',  '1-7Hz', ...
    'dest', 'bad_1-7Hz');
% Process: Rename event (40-240Hz > bad_40-240Hz)
bst_process('CallProcess', 'process_evt_rename', sFilesRun1, [], ...
    'src',  '40-240Hz', ...
    'dest', 'bad_40-240Hz');
% Process: Snapshot: SSP projectors
bst_process('CallProcess', 'process_snapshot', sFilesRun1, [], ...
    'target',  2, ...  % SSP projectors
    'Comment', 'SSP projectors');



%% ===== TUTORIAL #15: IMPORT EVENTS =================================================
%  ===================================================================================
disp([10 'DEMO> Tutorial #15: Import events' 10]);
% Process: Import MEG/EEG: Events (Run01)
sFilesEpochs1 = bst_process('CallProcess', 'process_import_data_event', sFilesRun1, [], ...
    'subjectname', SubjectName, ...
    'condition',   '', ...
    'eventname',   'standard, deviant', ...
    'timewindow',  [], ...
    'epochtime',   [-0.100, 0.500], ...
    'createcond',  0, ...
    'ignoreshort', 1, ...
    'usectfcomp',  1, ...
    'usessp',      1, ...
    'freq',        [], ...
    'baseline',    [-0.1, -0.0017]);

% Display raster plot
hFigRaster = view_erpimage({sFilesEpochs1.FileName}, 'erpimage', 'MEG');
panel_display();
bst_report('Snapshot', hFigRaster, sFilesEpochs1(1).FileName, 'ERP image');
close(hFigRaster);


%% ===== TUTORIAL #16: AVERAGE =======================================================
%  ===================================================================================
disp([10 'DEMO> Tutorial #16: Average' 10]);
% Process: Average: By trial group (folder average)
sFilesAvg = bst_process('CallProcess', 'process_average', sFilesEpochs1, [], ...
    'avgtype',    5, ...  % By trial groups (folder average)
    'avg_func',   7, ...  % Arithmetic average: mean(x)
    'weighted',   0, ...
    'keepevents', 1);
% Process: Delete events 'cardiac'
bst_process('CallProcess', 'process_evt_delete', sFilesAvg, [], ...
    'eventname', 'cardiac');
% Process: Snapshot: Recordings time series
bst_process('CallProcess', 'process_snapshot', sFilesAvg, [], ...
    'target',     5, ...  % Recordings time series
    'modality',   1, ...  % MEG (All)
    'Comment',    'Evoked response');
% Set colormap: global color scale
bst_colormaps('SetMaxMode', 'meg', 'global');
% Process: Snapshot: Recordings topography (contact sheet)
bst_process('CallProcess', 'process_snapshot', sFilesAvg, [], ...
    'target',         7, ...  % Recordings topography (contact sheet)
    'modality',       1, ...  % MEG
    'contact_time',   [0, 0.350], ...
    'contact_nimage', 15, ...
    'Comment',        'Evoked response');

%% ===== TUTORIAL #20: HEAD MODEL ====================================================
%  ===================================================================================
disp([10 'DEMO> Tutorial #20: Head model' 10]);

% === GET DEVIANT AVERAGE RUN01 ===
% Process: Select recordings in: Subject01/S01_AEF_20131218_01_600Hz_notch
sFiles01 = bst_process('CallProcess', 'process_select_files_data', [], [], ...
    'subjectname', SubjectName, ...
    'condition',   'S01_AEF_20131218_01_600Hz_notch', ...
    'includebad',  0);
% Process: Select file comments with tag: deviant
sFilesAvgDeviant01 = bst_process('CallProcess', 'process_select_tag', sFiles01, [], ...
    'tag',    'Avg: deviant', ...
    'search', 2, ...  % Search the file comments
    'select', 1);     % Select only the files with the tag

% ===== SOURCE ANALYSIS: SURFACE =====
% Process: Generate BEM surfaces
bst_process('CallProcess', 'process_generate_bem', [], [], ...
    'subjectname', SubjectName, ...
    'nscalp',      1922, ...
    'nouter',      1922, ...
    'ninner',      1922, ...
    'thickness',   4, ...
    'method',      'brainstorm');

% Process: Compute head model
bst_process('CallProcess', 'process_headmodel', sFilesAvgDeviant01, [], ...
    'sourcespace', 1, ...  % Cortex surface
    'meg',         4, ...  % OpenMEEG BEM
    'openmeeg',    struct(...
         'BemSelect',    [0, 0, 1], ...
         'BemCond',      [0.33, 0.0165, 0.33], ... 
         'BemNames',     {{'Scalp', 'Skull', 'Brain'}}, ...
         'BemFiles',     {{}}, ...
         'isAdjoint',    1, ...
         'isAdaptative', 1, ...
         'isSplit',      0, ...
         'SplitLength',  4000));


%% ===== TUTORIAL #21: NOISE COVARIANCE ==============================================
%  ===================================================================================
disp([10 'DEMO> Tutorial #21: Noise covariance' 10]);
% Process: Compute covariance (noise or data)
bst_process('CallProcess', 'process_noisecov', sFilesAvgDeviant01, [], ...
    'baseline',       [], ...
    'sensortypes',    'MEG', ...
    'target',         1, ...  % Noise covariance     (covariance over baseline time window)
    'dcoffset',       0, ...  % Block by block, to avoid effects of slow shifts in data
    'identity',       1, ...
    'copycond',       1, ...
    'copysubj',       0, ...
    'replacefile',    1);  % Replace

%% ===== TUTORIAL #22: SOURCE ESTIMATION =============================================
%  ===================================================================================
disp([10 'DEMO> Tutorial #22: Source estimation' 10]);

% coherent Maximu Entropy on the Mean (cMEM)

% Process: Compute sources: BEst
sAvgSrcMEM = bst_process('CallProcess', 'process_inverse_mem', sFilesAvgDeviant01, [], ...
    'comment',     'MEM', ...
    'mem',         struct(...
         'MEMpaneloptions', struct(...
               'InverseMethod', 'MEM', ...
               'automatic',     struct(...
                     'MEMexpert',   1, ...
                     'version',     '3.0.0', ...
                     'last_update', ''), ...
               'mandatory',     struct(...
                     'pipeline', 'cMEM'), ...
               'optional',      struct(...
                     'TimeSegment',     [0.05, 0.15], ...
                     'BaselineType',    {{'within-data'}}, ...
                     'Baseline',        [], ...
                     'BaselineHistory', {{'within'}}, ...
                     'BaselineSegment', [-0.1, 0], ...
                     'groupAnalysis',   0, ...
                     'display',         0), ...
               'clustering',    struct(...
                     'neighborhood_order',   4, ...
                     'clusters_type',        'static', ...
                     'MSP_scores_threshold', 0), ...
               'model',         struct(...
                     'depth_weigth_MNE',   0.5, ...
                     'depth_weigth_MEM',   0.5, ...
                     'active_mean_method', 2, ...
                     'alpha_method',       3, ...
                     'alpha_threshold',    0, ...
                     'initial_lambda',     1), ...
               'solver',        struct(...
                     'spatial_smoothing',  0.6, ...
                     'active_var_mult',    0.05, ...
                     'inactive_var_mult',  0, ...
                     'Optim_method',       'fminunc', ...
                     'parallel_matlab',    1, ...
                     'NoiseCov_recompute', 1, ...
                     'NoiseCov_method',    2))), ...
    'sensortypes', 'MEG');

% Process: Snapshot: Sources (one time)
bst_process('CallProcess', 'process_snapshot', sAvgSrcMEM, [], ...
    'target',    8, ...  % Sources (one time)
    'modality',  1, ...  % MEG (All)
    'orient',    1, ...  % left
    'time',      92, ...
    'threshold', 0, ...
    'Comment',   'Average Devient (cMEM)');


% wawelet Maximum Entropy on the Mean (wMEM)

wMEM_options = struct(...
               'InverseMethod', 'MEM', ...
               'automatic',     struct(...
                     'MEMexpert',   0, ...
                     'version',     '3.0.0', ...
                     'last_update', ''), ...
               'mandatory',     struct(...
                     'pipeline', 'wMEM'), ...
               'optional',      struct(...
                     'TimeSegment',     [0.05, 0.15], ...
                     'BaselineType',    {{'within-data'}}, ...
                     'Baseline',        [], ...
                     'BaselineHistory', {{'within'}}, ...
                     'BaselineSegment', [-0.1, 0], ...
                     'groupAnalysis',   0, ...
                     'display',         1), ...
               'clustering',    struct(...
                     'neighborhood_order',   4, ...
                     'clusters_type',        'static', ...
                     'MSP_scores_threshold', 0), ...
               'model',         struct(...
                     'depth_weigth_MNE',   0.5, ...
                     'depth_weigth_MEM',   0.5, ...
                     'active_mean_method', 2, ...
                     'alpha_method',       6, ...
                     'alpha_threshold',    0, ...
                     'initial_lambda',     1), ...
               'solver',        struct(...
                     'spatial_smoothing',  0.6, ...
                     'active_var_mult',    0.05, ...
                     'inactive_var_mult',  0, ...
                     'Optim_method',       'fminunc', ...
                     'parallel_matlab',    1, ...
                     'NoiseCov_recompute', 1, ...
                     'NoiseCov_method',    6), ...
               'wavelet',       struct(...
                     'type',            'rdw', ...
                     'vanish_moments',  3, ...
                     'order',           10, ...
                     'nb_levels',       128, ...
                     'shrinkage',       0, ...
                     'selected_scales', []));


% Process: Compute sources: BEst

% 1. Localizing only scale 4: 
wMEM_options.wavelet.selected_scales    = [4];

sAvgSrwMEM_scale4 = bst_process('CallProcess', 'process_inverse_mem', sFilesAvgDeviant01, [], ...
    'comment',     'MEM', ...
    'mem',         struct( 'MEMpaneloptions', wMEM_options), ...
    'sensortypes', 'MEG');
% Process: Snapshot: Sources (one time)
bst_process('CallProcess', 'process_snapshot', sAvgSrwMEM_scale4, [], ...
    'target',    8, ...  % Sources (one time)
    'modality',  1, ...  % MEG (All)
    'orient',    1, ...  % left
    'time',      92, ...
    'threshold', 0, ...
    'Comment',   'Average Devient (wMEM - scale 4)');

% 2. Localizing only scale 4: 
wMEM_options.wavelet.selected_scales    = [5];

sAvgSrwMEM_scale5 = bst_process('CallProcess', 'process_inverse_mem', sFilesAvgDeviant01, [], ...
    'comment',     'MEM', ...
    'mem',         struct( 'MEMpaneloptions', wMEM_options), ...
    'sensortypes', 'MEG');

% Process: Snapshot: Sources (one time)
bst_process('CallProcess', 'process_snapshot', sAvgSrwMEM_scale5, [], ...
    'target',    8, ...  % Sources (one time)
    'modality',  1, ...  % MEG (All)
    'orient',    1, ...  % left
    'time',      92, ...
    'threshold', 0, ...
    'Comment',   'Average Devient (wMEM - scale 5 )');

% 3. Localizing all scale: 
wMEM_options.wavelet.selected_scales    = [1,2,3,4,5];

sAvgSrwMEM_scaleAll = bst_process('CallProcess', 'process_inverse_mem', sFilesAvgDeviant01, [], ...
    'comment',     'MEM', ...
    'mem',         struct( 'MEMpaneloptions', wMEM_options), ...
    'sensortypes', 'MEG');

% Process: Snapshot: Sources (one time)
bst_process('CallProcess', 'process_snapshot', sAvgSrwMEM_scaleAll, [], ...
    'target',    8, ...  % Sources (one time)
    'modality',  1, ...  % MEG (All)
    'orient',    1, ...  % left
    'time',      92, ...
    'threshold', 0, ...
    'Comment',   'Average Devient (wMEM - all scale)');
%% ===== SAVE REPORT =====
% Save and display report
ReportFile = bst_report('Save', []);
if ~isempty(reports_dir) && ~isempty(ReportFile)
    bst_report('Export', ReportFile, reports_dir);
else
    bst_report('Open', ReportFile);
end

disp([10 'DEMO> Done.' 10]);
