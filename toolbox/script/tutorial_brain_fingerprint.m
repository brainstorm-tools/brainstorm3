% Script generated by Brainstorm (14-Mar-2023)


clear
close all
% Parameters
nPart=5;
UpperFreq = 4; % inclusive
LowerFreq= 150; % exclusive

cd '/media/jdscasta/Jason_drive/brainstorm_db_fingerprinting/TutorialOmega/data'

% files of time series for imaging
sFiles = {...
    'sub-0002/@rawsub-0002_ses-01_task-rest_run-01_meg_notch_high/data_0raw_sub-0002_ses-01_task-rest_run-01_meg_notch_high.mat', ...
    'sub-0003/@rawsub-0003_ses-01_task-rest_run-01_meg_notch_high/data_0raw_sub-0003_ses-01_task-rest_run-01_meg_notch_high.mat', ...
    'sub-0004/@rawsub-0004_ses-01_task-rest_run-01_meg_notch_high/data_0raw_sub-0004_ses-01_task-rest_run-01_meg_notch_high.mat', ...
    'sub-0006/@rawsub-0006_ses-01_task-rest_run-01_meg_notch_high/data_0raw_sub-0006_ses-01_task-rest_run-01_meg_notch_high.mat', ...
    'sub-0007/@rawsub-0007_ses-01_task-rest_run-01_meg_notch_high/data_0raw_sub-0007_ses-01_task-rest_run-01_meg_notch_high.mat'};


% Input files (imaging kernels)
sSources = {...
    'sub-0002/@rawsub-0002_ses-01_task-rest_run-01_meg_notch_high/results_dSPM-unscaled_MEG_KERNEL_240223_1404.mat', ...
    'sub-0003/@rawsub-0003_ses-01_task-rest_run-01_meg_notch_high/results_dSPM-unscaled_MEG_KERNEL_240223_1404.mat', ...
    'sub-0004/@rawsub-0004_ses-01_task-rest_run-01_meg_notch_high/results_dSPM-unscaled_MEG_KERNEL_240223_1404.mat', ...
    'sub-0006/@rawsub-0006_ses-01_task-rest_run-01_meg_notch_high/results_dSPM-unscaled_MEG_KERNEL_240223_1404.mat', ...
    'sub-0007/@rawsub-0007_ses-01_task-rest_run-01_meg_notch_high/results_dSPM-unscaled_MEG_KERNEL_240223_1404.mat'};

%% Compute PSD for all ROIs of an atlas (example below Destrieux)

% split each participant's recording in half
% these two recordings will be used to create PSDs that are the
% features which will define the brain-fingerprint

for i=1:nPart
    
    load(sFiles{i}, 'Time');
    
    start= Time(1)+30;
    middle= ((Time(1)+30) + (Time(2)-30))/2;
    endrecording = (Time(2)-30);
    
    % Process: Power spectrum density (Welch)
    sPSDtraining{i} = bst_process('CallProcess', 'process_psd', sSources{i}, [], ...
        'timewindow',  [start, middle], ...
        'win_length',  2, ...
        'win_overlap', 50, ...
        'units',       'physical', ...  % Physical: U2/Hz
        'clusters',    {'Destrieux', {'G_Ins_lg_and_S_cent_ins L', 'G_Ins_lg_and_S_cent_ins R', 'G_and_S_cingul-Ant L', 'G_and_S_cingul-Ant R', 'G_and_S_cingul-Mid-Ant L', 'G_and_S_cingul-Mid-Ant R', 'G_and_S_cingul-Mid-Post L', 'G_and_S_cingul-Mid-Post R', 'G_and_S_frontomargin L', 'G_and_S_frontomargin R', 'G_and_S_occipital_inf L', 'G_and_S_occipital_inf R', 'G_and_S_paracentral L', 'G_and_S_paracentral R', 'G_and_S_subcentral L', 'G_and_S_subcentral R', 'G_and_S_transv_frontopol L', 'G_and_S_transv_frontopol R', 'G_cingul-Post-dorsal L', 'G_cingul-Post-dorsal R', 'G_cingul-Post-ventral L', 'G_cingul-Post-ventral R', 'G_cuneus L', 'G_cuneus R', 'G_front_inf-Opercular L', 'G_front_inf-Opercular R', 'G_front_inf-Orbital L', 'G_front_inf-Orbital R', 'G_front_inf-Triangul L', 'G_front_inf-Triangul R', 'G_front_middle L', 'G_front_middle R', 'G_front_sup L', 'G_front_sup R', 'G_insular_short L', 'G_insular_short R', 'G_oc-temp_lat-fusifor L', 'G_oc-temp_lat-fusifor R', 'G_oc-temp_med-Lingual L', 'G_oc-temp_med-Lingual R', 'G_oc-temp_med-Parahip L', 'G_oc-temp_med-Parahip R', 'G_occipital_middle L', 'G_occipital_middle R', 'G_occipital_sup L', 'G_occipital_sup R', 'G_orbital L', 'G_orbital R', 'G_pariet_inf-Angular L', 'G_pariet_inf-Angular R', 'G_pariet_inf-Supramar L', 'G_pariet_inf-Supramar R', 'G_parietal_sup L', 'G_parietal_sup R', 'G_postcentral L', 'G_postcentral R', 'G_precentral L', 'G_precentral R', 'G_precuneus L', 'G_precuneus R', 'G_rectus L', 'G_rectus R', 'G_subcallosal L', 'G_subcallosal R', 'G_temp_sup-G_T_transv L', 'G_temp_sup-G_T_transv R', 'G_temp_sup-Lateral L', 'G_temp_sup-Lateral R', 'G_temp_sup-Plan_polar L', 'G_temp_sup-Plan_polar R', 'G_temp_sup-Plan_tempo L', 'G_temp_sup-Plan_tempo R', 'G_temporal_inf L', 'G_temporal_inf R', 'G_temporal_middle L', 'G_temporal_middle R', 'Lat_Fis-ant-Horizont L', 'Lat_Fis-ant-Horizont R', 'Lat_Fis-ant-Vertical L', 'Lat_Fis-ant-Vertical R', 'Lat_Fis-post L', 'Lat_Fis-post R', 'Pole_occipital L', 'Pole_occipital R', 'Pole_temporal L', 'Pole_temporal R', 'S_calcarine L', 'S_calcarine R', 'S_central L', 'S_central R', 'S_cingul-Marginalis L', 'S_cingul-Marginalis R', 'S_circular_insula_ant L', 'S_circular_insula_ant R', 'S_circular_insula_inf L', 'S_circular_insula_inf R', 'S_circular_insula_sup L', 'S_circular_insula_sup R', 'S_collat_transv_ant L', 'S_collat_transv_ant R', 'S_collat_transv_post L', 'S_collat_transv_post R', 'S_front_inf L', 'S_front_inf R', 'S_front_middle L', 'S_front_middle R', 'S_front_sup L', 'S_front_sup R', 'S_interm_prim-Jensen L', 'S_interm_prim-Jensen R', 'S_intrapariet_and_P_trans L', 'S_intrapariet_and_P_trans R', 'S_oc-temp_lat L', 'S_oc-temp_lat R', 'S_oc-temp_med_and_Lingual L', 'S_oc-temp_med_and_Lingual R', 'S_oc_middle_and_Lunatus L', 'S_oc_middle_and_Lunatus R', 'S_oc_sup_and_transversal L', 'S_oc_sup_and_transversal R', 'S_occipital_ant L', 'S_occipital_ant R', 'S_orbital-H_Shaped L', 'S_orbital-H_Shaped R', 'S_orbital_lateral L', 'S_orbital_lateral R', 'S_orbital_med-olfact L', 'S_orbital_med-olfact R', 'S_parieto_occipital L', 'S_parieto_occipital R', 'S_pericallosal L', 'S_pericallosal R', 'S_postcentral L', 'S_postcentral R', 'S_precentral-inf-part L', 'S_precentral-inf-part R', 'S_precentral-sup-part L', 'S_precentral-sup-part R', 'S_suborbital L', 'S_suborbital R', 'S_subparietal L', 'S_subparietal R', 'S_temporal_inf L', 'S_temporal_inf R', 'S_temporal_sup L', 'S_temporal_sup R', 'S_temporal_transverse L', 'S_temporal_transverse R'}}, ...
        'scoutfunc',   1, ...  % Mean
        'win_std',     0, ...
        'edit',        struct(...
             'Comment',         'Scouts,Power', ...
             'TimeBands',       [], ...
             'Freqs',           [], ...
             'ClusterFuncTime', 'before', ...
             'Measure',         'power', ...
             'Output',          'all', ...
             'SaveKernel',      0));
         
             % Process: Power spectrum density (Welch)
    sPSDvalidation{i} = bst_process('CallProcess', 'process_psd', sSources{i}, [], ...
        'timewindow',  [middle, endrecording], ...
        'win_length',  2, ... % 2 second windows
        'win_overlap', 50, ... % 50 % overlap
        'units',       'physical', ...  % Physical: U2/Hz
        'clusters',    {'Destrieux', {'G_Ins_lg_and_S_cent_ins L', 'G_Ins_lg_and_S_cent_ins R', 'G_and_S_cingul-Ant L', 'G_and_S_cingul-Ant R', 'G_and_S_cingul-Mid-Ant L', 'G_and_S_cingul-Mid-Ant R', 'G_and_S_cingul-Mid-Post L', 'G_and_S_cingul-Mid-Post R', 'G_and_S_frontomargin L', 'G_and_S_frontomargin R', 'G_and_S_occipital_inf L', 'G_and_S_occipital_inf R', 'G_and_S_paracentral L', 'G_and_S_paracentral R', 'G_and_S_subcentral L', 'G_and_S_subcentral R', 'G_and_S_transv_frontopol L', 'G_and_S_transv_frontopol R', 'G_cingul-Post-dorsal L', 'G_cingul-Post-dorsal R', 'G_cingul-Post-ventral L', 'G_cingul-Post-ventral R', 'G_cuneus L', 'G_cuneus R', 'G_front_inf-Opercular L', 'G_front_inf-Opercular R', 'G_front_inf-Orbital L', 'G_front_inf-Orbital R', 'G_front_inf-Triangul L', 'G_front_inf-Triangul R', 'G_front_middle L', 'G_front_middle R', 'G_front_sup L', 'G_front_sup R', 'G_insular_short L', 'G_insular_short R', 'G_oc-temp_lat-fusifor L', 'G_oc-temp_lat-fusifor R', 'G_oc-temp_med-Lingual L', 'G_oc-temp_med-Lingual R', 'G_oc-temp_med-Parahip L', 'G_oc-temp_med-Parahip R', 'G_occipital_middle L', 'G_occipital_middle R', 'G_occipital_sup L', 'G_occipital_sup R', 'G_orbital L', 'G_orbital R', 'G_pariet_inf-Angular L', 'G_pariet_inf-Angular R', 'G_pariet_inf-Supramar L', 'G_pariet_inf-Supramar R', 'G_parietal_sup L', 'G_parietal_sup R', 'G_postcentral L', 'G_postcentral R', 'G_precentral L', 'G_precentral R', 'G_precuneus L', 'G_precuneus R', 'G_rectus L', 'G_rectus R', 'G_subcallosal L', 'G_subcallosal R', 'G_temp_sup-G_T_transv L', 'G_temp_sup-G_T_transv R', 'G_temp_sup-Lateral L', 'G_temp_sup-Lateral R', 'G_temp_sup-Plan_polar L', 'G_temp_sup-Plan_polar R', 'G_temp_sup-Plan_tempo L', 'G_temp_sup-Plan_tempo R', 'G_temporal_inf L', 'G_temporal_inf R', 'G_temporal_middle L', 'G_temporal_middle R', 'Lat_Fis-ant-Horizont L', 'Lat_Fis-ant-Horizont R', 'Lat_Fis-ant-Vertical L', 'Lat_Fis-ant-Vertical R', 'Lat_Fis-post L', 'Lat_Fis-post R', 'Pole_occipital L', 'Pole_occipital R', 'Pole_temporal L', 'Pole_temporal R', 'S_calcarine L', 'S_calcarine R', 'S_central L', 'S_central R', 'S_cingul-Marginalis L', 'S_cingul-Marginalis R', 'S_circular_insula_ant L', 'S_circular_insula_ant R', 'S_circular_insula_inf L', 'S_circular_insula_inf R', 'S_circular_insula_sup L', 'S_circular_insula_sup R', 'S_collat_transv_ant L', 'S_collat_transv_ant R', 'S_collat_transv_post L', 'S_collat_transv_post R', 'S_front_inf L', 'S_front_inf R', 'S_front_middle L', 'S_front_middle R', 'S_front_sup L', 'S_front_sup R', 'S_interm_prim-Jensen L', 'S_interm_prim-Jensen R', 'S_intrapariet_and_P_trans L', 'S_intrapariet_and_P_trans R', 'S_oc-temp_lat L', 'S_oc-temp_lat R', 'S_oc-temp_med_and_Lingual L', 'S_oc-temp_med_and_Lingual R', 'S_oc_middle_and_Lunatus L', 'S_oc_middle_and_Lunatus R', 'S_oc_sup_and_transversal L', 'S_oc_sup_and_transversal R', 'S_occipital_ant L', 'S_occipital_ant R', 'S_orbital-H_Shaped L', 'S_orbital-H_Shaped R', 'S_orbital_lateral L', 'S_orbital_lateral R', 'S_orbital_med-olfact L', 'S_orbital_med-olfact R', 'S_parieto_occipital L', 'S_parieto_occipital R', 'S_pericallosal L', 'S_pericallosal R', 'S_postcentral L', 'S_postcentral R', 'S_precentral-inf-part L', 'S_precentral-inf-part R', 'S_precentral-sup-part L', 'S_precentral-sup-part R', 'S_suborbital L', 'S_suborbital R', 'S_subparietal L', 'S_subparietal R', 'S_temporal_inf L', 'S_temporal_inf R', 'S_temporal_sup L', 'S_temporal_sup R', 'S_temporal_transverse L', 'S_temporal_transverse R'}}, ...
        'scoutfunc',   1, ...  % Mean
        'win_std',     0, ...
        'edit',        struct(...
             'Comment',         'Scouts,Power', ...
             'TimeBands',       [], ...
             'Freqs',           [], ...
             'ClusterFuncTime', 'before', ...
             'Measure',         'power', ...
             'Output',          'all', ...
             'SaveKernel',      0));


end


%% vectorize data for fingerprinting

% collect data from frequnecy range
% vectorize and put into one large matrix
% do this for training and validation data seperately

training= [];
validation = [];

for i=1:nPart
    
    load(sPSDtraining{i}.FileName, 'TF', 'Freqs')
    indexFreq= Freqs >= UpperFreq & Freqs < LowerFreq;
    training(i,:) = reshape(squeeze(TF(:,:,indexFreq)), 1, []);
    
    load(sPSDvalidation{i}.FileName, 'TF', 'Freqs')
    indexFreq= Freqs >= UpperFreq & Freqs < LowerFreq;
    validation(i,:) = reshape(squeeze(TF(:,:,indexFreq)), 1, []);
    
    numFreq= sum(indexFreq); % save number of frequencies for later

end

%% compute differentiation accuracy and differentibility 
% participant similarity matrix 
participant_corr_matrix= corr(training', validation');

% differentiation accuracy acorss columns
[M,I]=max(participant_corr_matrix);
sum(I== 1:nPart);

% differentiation accuracy across rows
[M,I]=max(participant_corr_matrix');
sum(I== 1:nPart);

% differentibility
diff_1= (diag(participant_corr_matrix)-mean(participant_corr_matrix,1))/ std(participant_corr_matrix,0,1); % along columns

diff_2= (diag(participant_corr_matrix)-mean(participant_corr_matrix,2)')/ std(participant_corr_matrix,0,2)'; % along rows

% note that differentiability across rows and columns are generally
% strongly correlated. Participant similarity matrix is generally symetric
% although it does not necessairly have to be!

differentiability= (diff_1 + diff_2)/2; % take mean differentiability derrived from rows and columns


%% compute salient features for differentiation (Intraclass correlations)

% let us now compute the importnace of regions/ freuqncy bands for
% participant differentiation 


% TO REMOVE READ IN ICC VALUES OF CAMCAN

training= csvread('/export02/data/CAMCAN_destriuex_fingerprint_PCA/Destriuex_PSD_justrest.csv');
validation= csvread('/export02/data/CAMCAN_destriuex_fingerprint_PCA/Destriuex_PSD_justrest2.csv');

z_training= (training- mean(training, 2))./ std(training,0,2);
z_validation= (validation- mean(validation, 2))./ std(validation,0,2);
icc = zeros(1,length(validation));

k = 2; % number of recordings
df_b = nPart-1; % degrees of freedom for s2
df_w = nPart*(k-1); % degrees of freedom for r

for i_edge = 1:length(validation)
    
  x= [z_training(:,i_edge),z_validation(:,i_edge) ];
  x_w_mean =  mean(x,2) ;
  x_g_mean = mean(x(:)) ;
  ss_t = sum(((x - x_g_mean).^2), 'all') ;
  ss_w = sum((x - (x_w_mean)).^2, 'all') ;
  ss_b = ss_t - ss_w ;
  ms_b = ss_b / df_b ;
  ms_w = ss_w / df_w ;
  icc(i_edge) = (ms_b - ms_w) ./ (ms_b + ((k-1).*ms_w)) ;
  
end

%reshape matrix where rows are regions (see RowNames of PSDs in brainstorm)
% and columns are frequencies
icc= reshape(icc, [numFreq, length(validation)/numFreq])';
