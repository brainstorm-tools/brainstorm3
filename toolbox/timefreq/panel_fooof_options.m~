function varargout = panel_fooof_options(varargin)
% PANEL_TIMEFREQ_OPTIONS: Options for time-frequency computation.
% 
% USAGE:  bstPanelNew = panel_timefreq_options('CreatePanel')
%                   s = panel_timefreq_options('GetPanelContents')

% @=============================================================================
% This function is part of the Brainstorm software:
% https://neuroimage.usc.edu/brainstorm
% 
% Copyright (c)2000-2020 University of Southern California & McGill University
% This software is distributed under the terms of the GNU General Public License
% as published by the Free Software Foundation. Further details on the GPLv3
% license can be found at http://www.gnu.org/copyleft/gpl.html.
% 
% FOR RESEARCH PURPOSES ONLY. THE SOFTWARE IS PROVIDED "AS IS," AND THE
% UNIVERSITY OF SOUTHERN CALIFORNIA AND ITS COLLABORATORS DO NOT MAKE ANY
% WARRANTY, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
% MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, NOR DO THEY ASSUME ANY
% LIABILITY OR RESPONSIBILITY FOR THE USE OF THIS SOFTWARE.
%
% For more information type "brainstorm license" at command prompt.
% =============================================================================@
%
% Authors: Francois Tadel, 2010-2020

eval(macro_method);
end


%% ===== CREATE PANEL =====
function [bstPanelNew, panelName] = CreatePanel(sProcess, sFiles)  %#ok<DEFNU>  
    global ctrl
    panelName = 'FOOOFOptions';
    % Java initializations
    import java.awt.*;
    import javax.swing.*;
    
    Method = strrep(strrep(func2str(sProcess.Function), 'process_', ''), 'timefreq', 'morlet');
    
    fooof_type = sProcess.options.fooofType.Value;
    panelTitle = join({'Displaying options for FOOOF type: ', ... 
        sProcess.options.fooofType.Comment{fooof_type}});
    % Create main main panel
    jPanelNew = gui_river(panelTitle{1});
    
    % ===== FREQUENCY RANGE =====
    jPanelFreqs = gui_river([1,1]);
                            gui_component('label', jPanelFreqs, [], 'Frequency range for analysis:');
        jTextFreqLower =    gui_component('text', jPanelFreqs, 'hfill', '1.0');
        jTextFreqLower.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                            gui_component('label', jPanelFreqs, [], ' - ');
        jTextFreqUpper =    gui_component('text', jPanelFreqs, 'hfill', '40.0');
        jTextFreqUpper.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                            gui_component('label', jPanelFreqs, [], ' Hz');                
        initStart = 1.0;    initStop  = 40.0;   
        precision = 1; bounds = {-1e30, 1e30, 10};
        valUnits = gui_validate_text(jTextFreqLower, [], jTextFreqUpper, bounds, 'Hz', precision, initStart, @UpdatePanel);
        [~,~] = gui_validate_text(jTextFreqUpper, jTextFreqLower, [], bounds, valUnits, precision, initStop,  @UpdatePanel);
    jPanelNew.add('br', jPanelFreqs);
    
    % ===== PEAK TYPE =====
    if fooof_type == 1
        jPanelPeakType = gui_river([1,1]);
                            gui_component('label', jPanelPeakType, 'br', 'Peak Model:');
        jButtonGroup2 = ButtonGroup();
            jRadioGauss =   gui_component('radio', jPanelPeakType, [], 'Gaussian', jButtonGroup2, [], @UpdatePanel);
            jRadioCauchy =  gui_component('radio', jPanelPeakType, [], 'Cauchy*', jButtonGroup2, [], @UpdatePanel);
            jRadioBest =    gui_component('radio', jPanelPeakType, [], 'Best of Both*', jButtonGroup2, [], @UpdatePanel);
                            gui_component('label', jPanelPeakType, [], '(* experimental)');
        % Set Default
        jRadioGauss.setSelected(1);
        jPanelNew.add('br', jPanelPeakType);
    end
    
    % ===== PEAK WIDTH LIMITS =====
    jPanelPeakWidth = gui_river([1,1]);
                                gui_component('label', jPanelPeakWidth, [], 'Peak Width Limits:');
        jTextPeakWidthLower =   gui_component('text', jPanelPeakWidth, 'hfill', '0.5');
        jTextPeakWidthLower.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                                gui_component('label', jPanelPeakWidth, [], ' - ');
        jTextPeakWidthUpper =   gui_component('text', jPanelPeakWidth, 'hfill', '12.0');
        jTextPeakWidthUpper.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                                gui_component('label', jPanelPeakWidth, [], ' Hz');                
        initStart = 0.5;    initStop  = 12.0;    precision = 1;
        gui_validate_text(jTextPeakWidthLower, [], jTextPeakWidthUpper, bounds, 'Hz', precision, initStart, @UpdatePanel);
        gui_validate_text(jTextPeakWidthUpper, jTextPeakWidthLower, [], bounds, 'Hz', precision, initStop,  @UpdatePanel);
    jPanelNew.add('br', jPanelPeakWidth);
    
    % ===== MAX NUMBER OF PEAKS =====
    jPanelMaxPeaks = gui_river([1,1]);
                        gui_component('label', jPanelMaxPeaks, [], 'Maximum number of peaks:');
        jTextMaxPeaks = gui_component('text', jPanelMaxPeaks, 'hfill', '2');
        jTextMaxPeaks.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        initStart = 2;    precision = 0;
        gui_validate_text(jTextMaxPeaks, [], [], bounds, 'Hz', precision, initStart, @UpdatePanel);
    jPanelNew.add('br', jPanelMaxPeaks);
    
    % ===== MIN PEAK HEIGHT =====
    jPanelMinPeakH = gui_river([1,1]);
                        gui_component('label', jPanelMinPeakH, [], 'Minimum peak height:');
        jTextMinPeakH = gui_component('text', jPanelMinPeakH, 'hfill', '2.0');
        jTextMinPeakH.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                        gui_component('label', jPanelMinPeakH, [], ' dB');
        initStart = 2;    precision = 1;
        gui_validate_text(jTextMinPeakH, [], [], bounds, 'Hz', precision, initStart, @UpdatePanel);
    jPanelNew.add('br', jPanelMinPeakH);
    
    % ===== PEAK THRESHOLD =====
    jPanelPeakThresh = gui_river([1,1]);
                            gui_component('label', jPanelPeakThresh, [], 'Peak threshold:');
        jTextPeakThresh =   gui_component('text', jPanelPeakThresh, 'hfill', '1.0');
        jTextPeakThresh.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                            gui_component('label', jPanelPeakThresh, [], ' stdev of noise');
        initStart = 1;    precision = 1;
        gui_validate_text(jTextPeakThresh, [], [], bounds, 'Hz', precision, initStart, @UpdatePanel);
    jPanelNew.add('br', jPanelPeakThresh);
    
    % ===== PROXIMITY THRESHOLD =====
    if fooof_type == 1
        jPanelProxThresh = gui_river([1,1]);
                                gui_component('label', jPanelProxThresh, [], 'Proximity Threshold:');
            jTextProxThresh =   gui_component('text', jPanelProxThresh, 'hfill', '2.0');
            jTextProxThresh.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                                gui_component('label', jPanelProxThresh, [], ' stdev of distribution');
            initStart = 2;    precision = 1;
            gui_validate_text(jTextProxThresh, [], [], bounds, 'Hz', precision, initStart, @UpdatePanel);
        jPanelNew.add('br', jPanelProxThresh);
    end
    
    % ===== APERIODIC MODE =====
    jPanelAperMode = gui_river([1,1]);
                        gui_component('label', jPanelAperMode, 'br', 'Aperiodic Mode:');
    jButtonGroup1 = ButtonGroup();
        jRadioFixed =   gui_component('radio', jPanelAperMode, [],   'Fixed', jButtonGroup1, [], @UpdatePanel);
        jRadioKnee =    gui_component('radio', jPanelAperMode, [], 'Knee', jButtonGroup1, [], @UpdatePanel);
    % Set Default
    jRadioFixed.setSelected(1);
    jPanelNew.add('br', jPanelAperMode);
    
    % ===== GUESS WEIGHT =====
    if fooof_type == 1
        jPanelGuessWeight = gui_river([1,1]);
                         gui_component('label', jPanelGuessWeight, 'br', 'Aperiodic Mode:');
        jButtonGroup3 = ButtonGroup();
            jRadioNone = gui_component('radio', jPanelGuessWeight, [], 'None', jButtonGroup3, [], @UpdatePanel);
            jRadioWeak = gui_component('radio', jPanelGuessWeight, [], 'Weak', jButtonGroup3, [], @UpdatePanel);
            jRadioStrong = gui_component('radio', jPanelGuessWeight, [], 'Strong', jButtonGroup3, [], @UpdatePanel);
        % Set Default
        jRadioNone.setSelected(1);
        jPanelNew.add('br', jPanelGuessWeight);
    end
    % ===== VALIDATION BUTTON =====
    gui_component('Button', jPanelNew, 'br right', 'OK', [], [], @ButtonOk_Callback);

    % ===== PANEL CREATION =====
    % Put everything in a big scroll panel
    jPanelScroll = javax.swing.JScrollPane(jPanelNew);

    % Return a mutex to wait for panel close
    bst_mutex('create', panelName);
    % Controls list
    if fooof_type == 1
        ctrl = struct('jTextFreqLower',      jTextFreqLower, ...
                      'jTextFreqUpper',      jTextFreqUpper, ...
                      'jRadioGauss',         jRadioGauss, ...
                      'jRadioCauchy',        jRadioCauchy, ...
                      'jRadioBest',          jRadioBest, ...
                      'jTextPeakWidthLower', jTextPeakWidthLower, ...
                      'jTextPeakWidthUpper', jTextPeakWidthUpper, ...
                      'jTextMaxPeaks',       jTextMaxPeaks, ...
                      'jTextMinPeakH',       jTextMinPeakH, ...
                      'jTextPeakThresh',     jTextPeakThresh, ...
                      'jTextProxThresh',     jTextProxThresh, ...
                      'jRadioFixed',         jRadioFixed, ...
                      'jRadioKnee',          jRadioKnee, ...
                      'jRadioNone',          jRadioNone, ...
                      'jRadioWeak',          jRadioWeak, ...
                      'jRadioStrong',        jRadioStrong, ...
                      'Method',              Method);
    elseif fooof_type == 2
        ctrl = struct('jTextFreqLower',      jTextFreqLower, ...
                      'jTextFreqUpper',      jTextFreqUpper, ...
                      'jTextPeakWidthLower', jTextPeakWidthLower, ...
                      'jTextPeakWidthUpper', jTextPeakWidthUpper, ...
                      'jTextMaxPeaks',       jTextMaxPeaks, ...
                      'jTextMinPeakH',       jTextMinPeakH, ...
                      'jTextPeakThresh',     jTextPeakThresh, ...
                      'jRadioFixed',         jRadioFixed, ...
                      'jRadioKnee',          jRadioKnee, ...
                      'Method',              Method);        
    end
    % Create the BstPanel object that is returned by the function
    bstPanelNew = BstPanel(panelName, jPanelScroll, ctrl);
    
    UpdatePanel();
    
%% =================================================================================
%  === INTERNAL CALLBACKS ==========================================================
%  =================================================================================
%% ===== OK BUTTON =====
    function ButtonOk_Callback(varargin)
        % Release mutex and keep the panel opened
        bst_mutex('release', panelName);
    end

%% ===== UPDATE PANEL =====
    function UpdatePanel(varargin)
        % Get panel contents
        tfOPTIONS = GetPanelContents(); 
    end
end

%% =================================================================================
%  === EXTERNAL CALLBACKS ==========================================================
%  =================================================================================   
%% ===== GET PANEL CONTENTS =====
function s = GetPanelContents()
    global ctrl
    if isempty(ctrl) || ~isfield(ctrl,'jTextFreqLower') % If options not opened
        s = bst_get('TimefreqOptions_fooof');    
    elseif isfield(ctrl,'jRadioNone') % Field only in Matlab standalone
        s.freqRange =      [str2double(ctrl.jTextFreqLower.getText()) str2double(ctrl.jTextFreqUpper.getText())];
        if ctrl.jRadioGauss.isSelected()
            s.peakType = 1;
        elseif ctrl.jRadioCauchy.isSelected()
            s.peakType = 2; else
            s.peakType = 3;
        end
        s.peakWidthLimits =[str2double(ctrl.jTextPeakWidthLower.getText()) str2double(ctrl.jTextPeakWidthUpper.getText())];
        s.maxPeaks =        str2double(ctrl.jTextMaxPeaks.getText());
        s.minPeakHeight =   str2double(ctrl.jTextMinPeakH.getText());
        s.peakThresh =      str2double(ctrl.jTextPeakThresh.getText());
        s.proxThresh =      str2double(ctrl.jTextProxThresh.getText());
        if ctrl.jRadioFixed.isSelected()
            s.aperMode =    1;   else    
            s.aperMode =    2;
        end
        if      ctrl.jRadioNone.isSelected()
            s.guessWeight = 1;   
        elseif  ctrl.jRadioWeak.isSelected()
            s.guessWeight = 2;   else    
            s.guessWeight = 3;
        end
    else
        s.freqRange =      [str2double(ctrl.jTextFreqLower.getText()) str2double(ctrl.jTextFreqUpper.getText())];
        s.peakWidthLimits =[str2double(ctrl.jTextPeakWidthLower.getText()) str2double(ctrl.jTextPeakWidthUpper.getText())];
        s.maxPeaks =        str2double(ctrl.jTextMaxPeaks.getText());
        s.minPeakHeight =   str2double(ctrl.jTextMinPeakH.getText());
        s.peakThresh =      str2double(ctrl.jTextPeakThresh.getText());
        s.proxThresh =      2; % Corrects bug when using python then matlab 
        s.guessWeight =     1; % versions without opening fooof options
        s.peakType =        1;
        if ctrl.jRadioFixed.isSelected()
            s.aperMode =    1;   else    
            s.aperMode =    2;
        end
    end
    bst_set('TimefreqOptions_fooof', s);
end

 %% ===== OPTIONS: RANGE CALLBACK =====
    function OptionRange_Callback(iProcess, optName, jTextMin, jTextMax)
        % Get current options
        try
            value = GlobalData.Processes.Current(iProcess).options.(optName).Value;
            % Get new value
            value{1} = [GetValue(jTextMin), GetValue(jTextMax)];
            % Update interface
            UpdatePanel();
        catch
        end
    end

    %% ===== TEXT: GET VALUE =====
    function val = GetValue(jText)
        % Get and check value
        val = str2num(char(jText.getText()));
        if isempty(val)
            val = [];
        end
    end

    %% ===== OPTIONS: SET OPTION VALUE =====
    function SetOptionValue(iProcess, optName, value)
        % Update value
        GlobalData.Processes.Current(iProcess).options.(optName).Value = value;
    end
