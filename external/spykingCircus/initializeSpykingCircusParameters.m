function initializeSpykingCircusParameters(convertedRawFilename, probe_file, output_dir, Fs)

% convertedRawFilename: the Filename of the converted to .dat file that the
% spike sorter creates. This will be the input to the spikesorter

% probe_file: text file that contains the probe info. Separate function
% creates it

% output_dir: THE FOLDER WHERE THE SPYKING CIRCUS FILES WILL BE CREATED -
% TEST THIS

% Fs: sampling rate of the raw file



% probe_file = 'F:\Adrien\spyking circus test\020_AA.prb';
% output_dir = 'F:\Adrien\spyking circus test';
% Fs = 30000;

outFid = fopen([convertedRawFilename '.params'], 'w');


fprintf(outFid,['### Note that depending on the file format selected, the parameters in the data section can vary\n' ...
'### You should refer to the documentation to know what are the needed parameters for a given\n' ...
'### file format. Otherwise, launch the code and a message will tell you what is needed\n\n' ...
'[data]\n' ...
'file_format    = raw_binary # Can be raw_binary, openephys, hdf5, ... See >> spyking-circus help -i for more info\n' ...
'stream_mode    = None       # None by default. Can be multi-files, or anything depending to the file format\n' ...
'mapping        = %s      # Mapping of the electrode (see http://spyking-circus.rtfd.ord) \n' ...
'suffix         =            # Suffix to add to generated files, if needed\n' ...
'overwrite      = True       # Filter or remove artefacts on site (if write access is possible). Data are duplicated otherwise\n' ...
'parallel_hdf5  = True       # Use the parallel HDF5 feature (if available)\n' ...
'output_dir     =  %s # By default, generated data are in the same folder as the data.\n' ...
'sampling_rate  = %s \n' ...
'data_dtype     = int16\n\n' ...
'[detection]\n' ...
'radius         = auto       # Radius [in um] (if auto, read from the prb file)\n' ...
'N_t            = 3          # Width of the templates [in ms]\n' ...
'spike_thresh   = 6          # Threshold for spike detection\n' ...
'peaks          = negative   # Can be negative (default), positive or both\n' ...
'dead_channels  =            # If not empty or specified in the probe, a dictionary {channel_group : [list_of_valid_ids]}\n\n' ...
'[filtering]\n' ...
'cut_off        = 300, auto  # Min and Max (auto=nyquist) cut off frequencies for the band pass butterworth filter [Hz]\n' ...
'filter         = True       # If True, then a low-pass filtering is performed\n' ...
'remove_median  = False      # If True, median over all channels is substracted to each channels (movement artifacts)\n' ...
'common_ground  =            # If you want to use a particular channel as a reference ground: should be a channel number\n\n' ...
'[triggers]\n' ...
'trig_file      =            # External stimuli to be considered as putative artefacts [in trig units] (see documentation)\n' ...
'trig_windows   =            # The time windows of those external stimuli [in trig units]\n' ...
'trig_unit      = ms         # The unit in which times are expressed: can be ms or timestep\n' ...
'clean_artefact = False      # If True, external artefacts induced by triggers will be suppressed from data\n' ...
'dead_file      =            # Portion of the signals that should be excluded from the analysis [in dead units]\n' ...
'dead_unit      = ms         # The unit in which times for dead regions are expressed: can be ms or timestep\n' ...
'ignore_times   = False      # If True, any spike in the dead regions will be ignored by the analysis\n' ...
'make_plots     =            # Generate sanity plots of the averaged artefacts [Nothing or None if no plots]\n\n' ...
'[whitening]\n' ...
'spatial        = True       # Perform spatial whitening\n' ...
'max_elts       = 1000       # Max number of events per electrode (should be compatible with nb_elts)\n' ...
'nb_elts        = 0.8        # Fraction of max_elts that should be obtained per electrode [0-1]\n' ...
'output_dim     = 5          # Can be in percent of variance explain, or num of dimensions for PCA on waveforms\n\n' ...
'[clustering]\n' ...
'extraction     = median-raw # Can be either median-raw (default) or mean-raw\n' ...
'sub_dim        = 10         # Number of dimensions to keep for local PCA per electrode\n' ...
'max_elts       = 10000      # Max number of events per electrode (should be compatible with nb_elts)\n' ...
'nb_elts        = 0.8        # Fraction of max_elts that should be obtained per electrode [0-1]\n' ...
'nb_repeats     = 3          # Number of passes used for the clustering\n' ...
'smart_search   = True       # Activate the smart search mode\n' ...
'merging_method = nd-bhatta  # Method to perform local merges (distance, dip, folding, nd-folding, bhatta, nd-bhatta)\n' ...
'merging_param  = default    # Merging parameter (see docs) (3 if distance, 0.5 if dip, 1e-9 if folding, 2 if bhatta)\n' ...
'sensitivity    = 3          # Single parameter for clustering sensitivity. The lower the more sensitive\n' ...
'cc_merge       = 0.95       # If CC between two templates is higher, they are merged\n' ...
'dispersion     = (5, 5)     # Min and Max dispersion allowed for amplitudes [in MAD]\n' ...
'fine_amplitude = True       # Optimize the amplitudes and compute a purity index for each template\n' ...
'make_plots     =            # Generate sanity plots of the clustering [Nothing or None if no plots]\n\n' ...
'[fitting]\n' ...
'amp_limits     = (0.3, 5)   # Amplitudes for the templates during spike detection [if not auto]\n' ...
'amp_auto       = True       # True if amplitudes are adjusted automatically for every templates\n' ...
'collect_all    = False      # If True, one garbage template per electrode is created, to store unfitted spikes\n' ...
'ratio_thresh   = 0.9        # Ratio of the spike_threshold used while fitting [0-1]. The lower the slower\n\n' ...
'[merging]\n' ...
'erase_all      = True       # If False, a prompt will ask you to remerge if merged has already been done\n' ...
'cc_overlap     = 0.75       # Only templates with CC higher than cc_overlap may be merged\n' ...
'cc_bin         = 2          # Bin size for computing CC [in ms]\n' ...
'default_lag    = 5          # Default length of the period to compute dip in the CC [ms]\n' ...
'auto_mode      = 0.75       # Between 0 (aggressive) and 1 (no merging). If empty, GUI is launched\n' ...
'remove_noise   = True       # If True, meta merging will remove obvious noise templates (weak amplitudes)\n' ...
'noise_limit    = 0.75       # Amplitude at which templates are classified as noise\n' ...
'sparsity_limit = 0          # Sparsity level (in percentage) for selecting templates as putative noise (in [0, 1])\n' ...
'time_rpv       = 5          # Time [in ms] to consider for Refraction Period Violations (RPV) (0 to disable)\n' ...
'rpv_threshold  = 0.02       # Percentage of RPV allowed while merging\n' ...
'merge_drifts   = True       # Try to automatically merge drifts, i.e. non overlapping spiking neurons\n' ...
'drift_limit    = 1          # Distance for drifts. The higher, the more non-overlapping the activities should be\n\n' ...
'[converting]\n' ...
'erase_all      = True       # If False, a prompt will ask you to export if export has already been done\n' ...
'export_pcs     = prompt     # Can be prompt [default] or in none, all, some\n' ...
'export_all     = False      # If True, unfitted spikes will be exported as the last Ne templates\n' ...
'sparse_export  = True       # For recent versions of phy, and large number of templates/channels\n' ...
'prelabelling   = False      # If True, putative labels (good, noise, best, mua) are pre-assigned to neurons\n\n' ...
'[validating]\n' ...
'nearest_elec   = auto       # Validation channel (e.g. electrode closest to the ground truth cell)\n' ...
'max_iter       = 200        # Maximum number of iterations of the stochastic gradient descent (SGD)\n' ...
'learning_rate  = 1.0e-3     # Initial learning rate which controls the step-size of the SGD\n' ...
'roc_sampling   = 10         # Number of points to estimate the ROC curve of the BEER estimate\n' ...
'test_size      = 0.3        # Portion of the dataset to include in the test split\n' ...
'radius_factor  = 0.5        # Radius factor to modulate physical radius during validation\n' ...
'juxta_dtype    = uint16     # Type of the juxtacellular data\n' ...
'juxta_thresh   = 6          # Threshold for juxtacellular detection\n' ...
'juxta_valley   = False      # True if juxta-cellular spikes are negative peaks\n' ...
'juxta_spikes   =            # If none, spikes are automatically detected based on juxta_thresh\n' ...
'filter         = True       # If the juxta channel need to be filtered or not\n' ...
'make_plots     = png        # Generate sanity plots of the validation [Nothing or None if no plots]\n\n' ...
'[extracting]\n' ...
'safety_time    = 1          # Temporal zone around which spikes are isolated [in ms]\n' ...
'max_elts       = 1000       # Max number of collected events per templates\n' ...
'output_dim     = 5          # Percentage of variance explained while performing PCA\n' ...
'cc_merge       = 0.975      # If CC between two templates is higher, they are merged\n' ...
'noise_thr      = 0.8        # Minimal amplitudes are such than amp*min(templates) < noise_thr*threshold\n\n' ...
'[noedits]\n' ...
'filter_done    = False      # Will become True automatically after filtering\n' ...
'artefacts_done = False      # Will become True automatically after removing artefacts\n' ...
'median_done    = False      # Will become True automatically after removing common median\n' ...
'ground_done    = False      # Will become True automatically after removing common ground\n'],probe_file,output_dir,num2str(Fs));

fclose(outFid);

end










