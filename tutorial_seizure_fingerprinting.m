function tutorial_seizure_fingerprinting(tutorial_dir, reports_dir)
% TUTORIAL_SEIZURE_FINGERPRINTING: Script that reproduces the results of the online tutorial "Seizure Fingerprinting".
%
% CORRESPONDING ONLINE TUTORIALS:
%     https://neuroimage.usc.edu/brainstorm/Tutorials/SeizureFingerprinting
%
% INPUTS: 
%    - tutorial_dir : Directory where the SubjectCMC.zip file has been unzipped
%    - reports_dir  : Directory where to save the execution report (instead of displaying it)

% @=============================================================================
% This function is part of the Brainstorm software:
% https://neuroimage.usc.edu/brainstorm
% 
% Copyright (c) University of Southern California & McGill University
% This software is distributed under the terms of the GNU General Public License
% as published by the Free Software Foundation. Further details on the GPLv3
% license can be found at http://www.gnu.org/copyleft/gpl.html.
% 
% FOR RESEARCH PURPOSES ONLY. THE SOFTWARE IS PROVIDED "AS IS," AND THE
% UNIVERSITY OF SOUTHERN CALIFORNIA AND ITS COLLABORATORS DO NOT MAKE ANY
% WARRANTY, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
% MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, NOR DO THEY ASSUME ANY
% LIABILITY OR RESPONSIBILITY FOR THE USE OF THIS SOFTWARE.
%
% For more information type "brainstorm license" at command prompt.
% =============================================================================@
%
% Authors: Chinmay Chinara, 2025
%          Yash Shashank Vakilna, 2025

%% ===== PARSE INPUTS =====
% Output folder for reports
if (nargin < 2) || isempty(reports_dir) || ~isfolder(reports_dir)
    reports_dir = [];
end
% You have to specify the folder in which the tutorial dataset is unzipped
if (nargin == 0) || isempty(tutorial_dir) || ~file_exist(tutorial_dir)
    error('The first argument must be the full path to the tutorial dataset folder.');
end

%% ===== FILES TO IMPORT =====
% Build the path of the files to import
tutorial_dir   = bst_fullfile(tutorial_dir, 'tutorial_seizure_fingerprinting');
MriFilePre     = bst_fullfile(tutorial_dir, 'anatomy', 'pre_T1.nii.gz');
MriFilePost    = bst_fullfile(tutorial_dir, 'anatomy', 'post_CT.nii.gz');
BaselineFile   = bst_fullfile(tutorial_dir, 'recordings', 'Baseline.edf');
IctalFile      = bst_fullfile(tutorial_dir, 'recordings', 'ictal_repetitive_spike.edf');
InterictalFile = bst_fullfile(tutorial_dir, 'recordings', 'interictal_spike.edf');
LvfaFile       = bst_fullfile(tutorial_dir, 'recordings', 'LVFA_and_wave.edf');
ElecPosFile    = bst_fullfile(tutorial_dir, 'Subject01_electrodes_mm.tsv');
% Check if the folder contains the required files
if ~file_exist(BaselineFile)
    error(['The folder ' tutorial_dir ' does not contain the folder from the file tutorial_seizure_fingerprinting.zip.']);
end
% Subject name
SubjectName = 'Subject01';

%% ===== CREATE PROTOCOL =====
% The protocol name has to be a valid folder name (no spaces, no weird characters...)
ProtocolName = 'TutorialSeizureFingerprinting';
% Start brainstorm without the GUI
if ~brainstorm('status')
    brainstorm nogui
end
% Delete existing protocol
gui_brainstorm('DeleteProtocol', ProtocolName);
% Create new protocol
gui_brainstorm('CreateProtocol', ProtocolName, 0, 0);
% Start a new report
bst_report('Start');

%% ===== IMPORT MRI VOLUMES =====
% Create subject
[~, iSubject] = db_add_subject(SubjectName, [], 0, 0);
% Import MRI volume
DbMriFilePre  = import_mri(iSubject, MriFilePre, 'ALL', 0, 0, 'pre_T1');
% Set fiducials in MRI
NAS = [104, 207, 85];
LPA = [ 26, 113, 78];
RPA = [176, 113, 78];
figure_mri('SetSubjectFiducials', iSubject, NAS, LPA, RPA, [], [], []);

% Process: Segment MRI with CAT12
bst_process('CallProcess', 'process_segment_cat12', [], [], ...
    'subjectname', SubjectName, ...
    'nvertices',   15000, ...
    'tpmnii',      {'', 'Nifti1'}, ...
    'sphreg',      1, ... % Use spherical registration
    'vol',         0, ... % No volume parcellations
    'extramaps',   0, ... % No additional cortical maps
    'cerebellum',  0);

% Import CT volume
DbCtFilePost = import_mri(iSubject, MriFilePost, 'ALL', 0, 0, 'post_CT');
% Register CT to MRI and reslice using 'SPM'
DbCtFilePostRegReslice = mri_coregister(DbCtFilePost, DbMriFilePre, 'spm', 1);
% Skull strip the MRI volume and apply to the CT using 'SPM'
DbCtFilePostSkullStrip = mri_skullstrip(DbCtFilePostRegReslice, DbMriFilePre, 'spm');

%% ===== ACCESS THE RECORDINGS =====
% Process: Create link to raw file
sFilesRaw = bst_process('CallProcess', 'process_import_data_raw', [], [], ...
    'subjectname',    SubjectName, ...
    'datafile',       {{BaselineFile, LvfaFile, IctalFile, InterictalFile}, 'EEG-EDF'}, ...
    'channelreplace', 0, ...
    'channelalign',   0);
% Process: Add EEG positions
bst_process('CallProcess', 'process_channel_addloc', sFilesRaw, [], ...
    'channelfile', {ElecPosFile, 'BIDS-SCANRAS-MM'}, ...
    'fixunits',    0, ... % No automatic fixing of distance units required
    'vox2ras',     2, ... % Apply voxel=>subject transformation and the coregistration transformation
    'mrifile',     {file_fullpath(DbCtFilePostSkullStrip), 'BST'});

%% ===== REVIEW RECORDINGS =====
% Process: Power spectrum density (Welch)
bst_process('CallProcess', 'process_psd', sFilesRaw, [], ...
    'timewindow',  [], ...
    'win_length',  5, ...
    'win_overlap', 50, ...
    'sensortypes', 'SEEG', ...
    'edit', struct(...
         'Comment',         'Power', ...
         'TimeBands',       [], ...
         'Freqs',           [], ...
         'ClusterFuncTime', 'none', ...
         'Measure',         'magnitude', ...
         'Output',          'all', ...
         'SaveKernel',      0));
% Process: Set channels type
% 'MPS16' channel needs to be excluded because for BEM head modeling it lies outside the inner skull
bst_process('CallProcess', 'process_channel_settype', sFilesRaw, [], 'sensortypes', 'MPS16', 'newtype', 'SEEG_NO_LOC');
% Define event: LVFA & wave and ictal repetitive spike
sEvt1 = db_template('event');
sEvt1.label  = 'sEEG onset';
sEvt1.epochs = 1;
sEvt1.times  = 15;
% Define event: Interictal spike
sEvt2 = db_template('event');
sEvt2.label  = 'Interictal spike';
sEvt2.epochs = 1; 
sEvt2.times  = 5;
% Process: Events: Import from file
bst_process('CallProcess', 'process_evt_import', sFilesRaw(2:3), [], ...
    'evtfile', {sEvt1, 'struct'}, ...
    'evtname', '');
bst_process('CallProcess', 'process_evt_import', sFilesRaw(4), [], ...
    'evtfile', {sEvt2, 'struct'}, ...
    'evtname', '');

%% ===== IMPORT RECORDINGS =====
% Process: Import SEEG event for LVFA & wave and ictal repetitive spike to database
sFilesOnset = bst_process('CallProcess', 'process_import_data_event', sFilesRaw(2:3), [], ...
    'subjectname',   SubjectName, ...
    'eventname',     'sEEG onset', ...
    'epochtime',     [-15, 15], ...
    'createcond',    0, ...
    'ignoreshort',   0, ...
    'usessp',        0, ...
    'baseline',      'all', ... % Remove DC offset: All recordings
    'blsensortypes', 'SEEG');   % Sensor types to remove DC offset
% Process: Import SEEG event for interictal spike to database
sFileInterictalSpike = bst_process('CallProcess', 'process_import_data_event', sFilesRaw(4), [], ...
    'subjectname',   SubjectName, ...
    'eventname',     'Interictal spike', ...
    'epochtime',     [-5, 5], ...
    'createcond',    0, ...
    'ignoreshort',   0, ...
    'usessp',        0, ...
    'baseline',      'all', ... % Remove DC offset: All recordings
    'blsensortypes', 'SEEG');   % Sensor types to remove DC offset
% ===== Bipolar Montage =====
MontageName = [SubjectName, ': SEEG (bipolar 2)[tmp]'];
% Apply montage (create new folders)
sFilesOnsetBip = bst_process('CallProcess', 'process_montage_apply', sFilesOnset, [], ...
    'montage',    MontageName, ...
    'createchan', 1);

%% ===== HEAD MODELING =====
% Process: Generate BEM surfaces
bst_process('CallProcess', 'process_generate_bem', [], [], ...
    'subjectname', SubjectName, ...
    'nscalp',      1922, ...
    'nouter',      1922, ...
    'ninner',      1922, ...
    'thickness',   4, ...
    'method',      'brainstorm');
% Process: Compute head model
bst_process('CallProcess', 'process_headmodel', sFileInterictalSpike, [], ...
    'comment',     '', ...
    'sourcespace', 1, ... % Cortex surface
    'meg',         1, ... % None
    'eeg',         1, ... % None
    'ecog',        1, ... % None
    'seeg',        2, ... % OpenMEEG BEM
    'openmeeg',    struct(...
         'BemSelect',    [0, 0, 1], ... % Only compute on BEM inner skull
         'BemCond',      [1, 0.0125, 1], ...
         'BemNames',     {{'Scalp', 'Skull', 'Brain'}}, ...
         'BemFiles',     {{}}, ...
         'isAdjoint',    0, ...
         'isAdaptative', 1, ...
         'isSplit',      0, ...
         'SplitLength',  4000));
% Copy head model to other folders
sHeadModel = bst_get('HeadModelForStudy', sFileInterictalSpike.iStudy);
db_set_headmodel(sHeadModel.FileName, 'AllConditions');
% Process: Compute noise covariance in Baseline
bst_process('CallProcess', 'process_noisecov', sFilesRaw(1), [], ...
    'baseline', [0, 300.9995], ...
    'dcoffset', 1, ... % Block by block, to avoid effects of slow shifts in data
    'identity', 0, ...
    'copycond', 1, ... % Copy to other folders
    'copysubj', 0);

%% ===== MODELING INTERICTAL SPIKES =====
% Process: Compute sources [2018] (SEEG)
sFileInterictalSpikeSrc = bst_process('CallProcess', 'process_inverse_2018', sFileInterictalSpike, [], ...
    'output',  1, ...  % Kernel only: shared
    'inverse', struct(...
         'Comment',        '', ...
         'InverseMethod',  'minnorm', ...
         'InverseMeasure', 'sloreta', ...
         'SourceOrient',   {{'fixed'}}, ...
         'UseDepth',       0, ...
         'NoiseMethod',    'diag', ...
         'SnrMethod',      'fixed', ...
         'SnrRms',         1e-06, ...
         'SnrFixed',       3, ...
         'ComputeKernel',  1, ...
         'DataTypes',      {{'SEEG'}}));
% ===== Create a Desikan-Killiany atlas with scouts only in the right hemisphere ====
% Load the surface
[hFig, iDS, iFig] = view_surface_data([], sFileInterictalSpikeSrc.FileName);
% Show the SEEG electrodes
figure_3d('PlotSensors3D', iDS, iFig);
% Set Desikan-Killiany as the current atlas
panel_scout('SetCurrentAtlas', 2);
% Get atlas
sAtlas = panel_scout('GetAtlas');
% Set scout options to display all the scouts
panel_scout('SetScoutsOptions', 0, 0, 1, 'all', 0.7, 1, 0, 0);
% Select the scouts in the right hemisphere
panel_scout('SetSelectedScouts', 2:2:length(sAtlas.Scouts));
% Create a new atlas from selected scouts
panel_scout('CreateAtlasSelected', 0, 0);
% Subdivide the new atlas to get scouts with 5 cm sq. area each
panel_scout('SubdivideScouts', 1, 'area', 5);
% Get the scouts
sScouts = panel_scout('GetScouts');
% Close the figure
close(hFig);

%% ===== MODELING ICTAL WAVE =====
% Process: Compute sources [2018] (SEEG)
sFileLvfaOnsetSrc = bst_process('CallProcess', 'process_inverse_2018', sFilesOnset(1), [], ...
    'output',  1, ...  % Kernel only: shared
    'inverse', struct(...
         'Comment',        '', ...
         'InverseMethod',  'minnorm', ...
         'InverseMeasure', 'sloreta', ...
         'SourceOrient',   {{'fixed'}}, ...
         'UseDepth',       0, ...
         'NoiseMethod',    'diag', ...
         'SnrMethod',      'fixed', ...
         'SnrRms',         1e-06, ...
         'SnrFixed',       3, ...
         'ComputeKernel',  1, ...
         'DataTypes',      {{'SEEG'}}));

%% ===== MODELING ICTAL ONSET WITH LVFA (SENSOR SPACE) =====
% Process: Time-frequency (Morlet wavelets)
bst_process('CallProcess', 'process_timefreq', sFilesOnsetBip(1), [], ...
    'sensortypes', 'SEEG', ...
    'edit',        struct(...
         'Comment',         'Power,1-100Hz', ...
         'TimeBands',       [], ...
         'Freqs',           [1, 2.1, 3.3, 4.7, 6.1, 7.8, 9.6, 11.5, 13.7, 16.1, 18.7, 21.6, 24.8, ...
                             28.3, 32.1, 36.4, 41.1, 46.2, 51.9, 58.1, 64.9, 72.5, 80.8, 89.9, 100], ...
         'MorletFc',        1, ...
         'MorletFwhmTc',    6, ...
         'ClusterFuncTime', 'none', ...
         'Measure',         'power', ...
         'Output',          'all', ...
         'SaveKernel',      0, ...
         'Method',          'morlet'), ...
    'normalize2020', 'multiply2020');  % Spectral flattening: Multiply output power values by frequency

%% ===== MODELING ICTAL ONSET WITH LVFA (SOURCE SPACE) =====
% Process: Scouts time series: All
sFileLvfaOnsetScoutTs = bst_process('CallProcess', 'process_extract_scout', sFileLvfaOnsetSrc, [], ...
    'timewindow',     [-15, 15], ...
    'scouts',         {'Desikan-Killiany_02', {sScouts.Label}}, ...
    'flatten',        1, ...
    'scoutfunc',      'pca', ...
    'isflip',         1, ...
    'isnorm',         0, ...
    'concatenate',    1, ...
    'save',           1, ...
    'addrowcomment',  1, ...
    'addfilecomment', []);

% Process: Time-frequency (Morlet wavelets)
bst_process('CallProcess', 'process_timefreq', sFileLvfaOnsetScoutTs, [], ...
    'sensortypes', 'SEEG', ...
    'edit',        struct(...
         'Comment',         'Power,1-100Hz', ...
         'TimeBands',       [], ...
         'Freqs',           [1, 2.1, 3.3, 4.7, 6.1, 7.8, 9.6, 11.5, 13.7, 16.1, 18.7, 21.6, 24.8, ...
                             28.3, 32.1, 36.4, 41.1, 46.2, 51.9, 58.1, 64.9, 72.5, 80.8, 89.9, 100], ...
         'MorletFc',        1, ...
         'MorletFwhmTc',    6, ...
         'ClusterFuncTime', 'none', ...
         'Measure',         'power', ...
         'Output',          'all', ...
         'SaveKernel',      0, ...
         'Method',          'morlet'), ...
    'normalize2020', 'multiply2020');  % Spectral flattening: Multiply output power values by frequency

%% ===== MODELING ICTAL ONSET WITH REPETITIVE SPIKING (SENSOR SPACE) =====
% Process: Time-frequency (Morlet wavelets)
bst_process('CallProcess', 'process_timefreq', sFilesOnsetBip(2), [], ...
    'sensortypes', 'PIN5-PIN6', ...
    'edit',        struct(...
         'Comment',         'Power,1-100Hz', ...
         'TimeBands',       [], ...
         'Freqs',           [1, 2.1, 3.3, 4.7, 6.1, 7.8, 9.6, 11.5, 13.7, 16.1, 18.7, 21.6, 24.8, ...
                             28.3, 32.1, 36.4, 41.1, 46.2, 51.9, 58.1, 64.9, 72.5, 80.8, 89.9, 100], ...
         'MorletFc',        1, ...
         'MorletFwhmTc',    6, ...
         'ClusterFuncTime', 'none', ...
         'Measure',         'power', ...
         'Output',          'all', ...
         'SaveKernel',      0, ...
         'Method',          'morlet'), ...
    'normalize2020', 'multiply2020');  % Spectral flattening: Multiply output power values by frequency

%% ===== MODELING ICTAL ONSET WITH REPETITIVE SPIKING (SOURCE SPACE) =====
% Process: Compute sources [2018] (SEEG)
bst_process('CallProcess', 'process_inverse_2018', sFilesOnset(2), [], ...
    'output',  1, ...  % Kernel only: shared
    'inverse', struct(...
         'Comment',        '', ...
         'InverseMethod',  'minnorm', ...
         'InverseMeasure', 'sloreta', ...
         'SourceOrient',   {{'fixed'}}, ...
         'UseDepth',       0, ...
         'NoiseMethod',    'diag', ...
         'SnrMethod',      'fixed', ...
         'SnrRms',         1e-06, ...
         'SnrFixed',       3, ...
         'ComputeKernel',  1, ...
         'DataTypes',      {{'SEEG'}}));

%% ===== SAVE AND DISPLAY REPORT =====
ReportFile = bst_report('Save', []);
if ~isempty(reports_dir) && ~isempty(ReportFile)
    bst_report('Export', ReportFile, reports_dir);
else
    bst_report('Open', ReportFile);
end

disp([10 'DEMO> Seizure Fingerpriting tutorial completed' 10]);